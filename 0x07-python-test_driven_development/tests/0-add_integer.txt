===============================
Tesst for The ``0-add_integer`` module
===============================

This module defines an integer addition function ``add_integers(a,b=98)``


Using ``add_integer``
---------------------
``add_integer(...)``` returns the addition of its two arguments. For numbers,
that value is equivalent to using the ``+`` operator.

::

First import ``add_integer`` from the ``0-add_integer`` module
	>>> add_integer = __import__('0-add_integer').add_integer

Now test it:

Numbers:
========
::

	Test #1: (+)integer + (+)integer ==> Valid
	>>> add_integer(1, 2)
	3

::

	# Test #2: (+)integer + (-)integer ==> Valid
	>>> add_integer(100, -2)
	98

The function also works with floating points numbers.

::

	# Test #3: (+)float + (-)float ==> Valid
	>>> add_integer(100.0, -2.0)
	98

The function castes the floats to ints first berfore addition if performed

::

	# Test #4: (+)float + (+)float ==> Valid
	>>> add_integer(5.4, 1.9)
	6

Floating point and integers can be added.

::

	# Test #5: (+)float + (-)integer ==> Valid
	>>> add_integer(100.1, -2)
	98

The second parameter is optional

::

	# Test #6: one integer ==> Valid
	>>> add_integer(2)
	100


Non-Numbers
===========

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:

::

	# Test #7: integer + string ==> Invalid
	>>> add_integer(4, "School")
	Traceback (most recent call last):
		...
	TypeError: b must be an integer

::

	# Test #8: string + integer ==> Invalid
	>>> add_integer("adham", 3)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

If both numbers are non-integer and non-floats, The TypeError message is printed only for the first argument

::

	# Test #9: string + string ==> Invalid
	>>> add_integer("adham", "allam")
	Traceback (most recent call last):
		...
	TypeError: a must be an integer


Numbers can't be None

::

	# Test #10: None + integer ==> Invalid
	>>> add_integer(None, 5)
	Traceback (most recent call last):
		...
	TypeError: a must be an integer

::

	# Test #11: no arguments ==> Invalid
	>>> add_integer()
	Traceback (most recent call last):
		...
	TypeError: add_integer() missing 1 required positional argument: 'a'

The function will fail if infinity is provided

::

	Test #12: infinity ==> Invalid
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
		...
	OverflowError: cannot convert float infinity to integer


The funtion will fail if nan is provided

::

	Test #13: NaN ==> Invalid
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
		...
	ValueError: cannot convert float NaN to integer
